"""
Model equivalent to examples/gcal.ty before moving to class-based
approach. This version uses sparse representation for projections.

This script is used to test against gcal_sparse.ty_DATA. This was the
original training test data for the GCAL model (the first version of
gcal.ty_DATA) and should match nearly identically with gcal.ty_DATA.
"""

from topo.sparse.sparsecf import SparseConnectionField, CFPLF_Hebbian_Sparse,\
                                 CFPOF_DivisiveNormalizeL1_Sparse, CFPRF_DotProduct_Sparse,\
                                 compute_sparse_joint_norm_totals
from topo.submodel.gcal import ModelGCAL
from topo.submodel import Model

@Model.definition
class SparseGCAL(ModelGCAL):
    """
    Reproduces the results of the examples/gcal.ty file using sparse representation.
    """

    @Model.SparseCFProjection
    def V1_afferent(self, src_properties, dest_properties):
        params = super(SparseGCAL, self).V1_afferent(src_properties, dest_properties)
        return dict(params[0],
                    cf_type = SparseConnectionField,
                    response_fn = CFPRF_DotProduct_Sparse,
                    learning_fn = CFPLF_Hebbian_Sparse,
                    weights_output_fns = [CFPOF_DivisiveNormalizeL1_Sparse])

    @Model.SettlingCFSheet
    def V1(self, properties):
        params = super(SparseGCAL, self).V1(properties)
        return dict(params, joint_norm_fn=compute_sparse_joint_norm_totals)


topo.sim.model = SparseGCAL()